=begin
#Invoicetronic API

#The [Invoicetronic API][2] is a RESTful service that allows you to send and receive invoices through the Italian [Servizio di Interscambio (SDI)][1], or Interchange Service. The API is designed to be simple and easy to use, abstracting away SDI complexity while providing complete control over the invoice send/receive process. It provides advanced features as encryption at rest, multi-language pre-flight invoice validation, multiple upload formats, webhooks, event logging, client SDKs, and CLI tools.  For more information, see  [Invoicetronic website][2]  [1]: https://www.fatturapa.gov.it/it/sistemainterscambio/cose-il-sdi/ [2]: https://invoicetronic.com/

The version of the OpenAPI document: 1
Contact: support@invoicetronic.com
Generated by: https://openapi-generator.tech
Generator version: 7.12.0

=end

require 'cgi'

module Invoicetronic_Sdk
  class LogApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # List events
    # Every API operation is logged and can be retrieved here. Log records are preserved for 15 days.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :company_id Company id
    # @option opts [String] :endpoint 
    # @option opts [String] :method 
    # @option opts [Integer] :api_verion Api version
    # @option opts [Integer] :status_code Response status code
    # @option opts [Time] :date_created_from UTC ISO 8601 (2024-11-29T12:34:56Z)
    # @option opts [Time] :date_created_to UTC ISO 8601 (2024-11-29T12:34:56Z)
    # @option opts [Integer] :page Page number. Defaults to 1. (default to 1)
    # @option opts [Integer] :page_size Items per page. Defaults to 50. Cannot be greater than 200. (default to 100)
    # @option opts [String] :sort Sort by field. Prefix with &#39;-&#39; for descending order.
    # @option opts [String] :query 
    # @option opts [Boolean] :success 
    # @option opts [Time] :date_time_from Date and time of the event
    # @option opts [Time] :date_time_to Date and time of the event
    # @return [Array<Event>]
    def log_get(opts = {})
      data, _status_code, _headers = log_get_with_http_info(opts)
      data
    end

    # List events
    # Every API operation is logged and can be retrieved here. Log records are preserved for 15 days.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :company_id Company id
    # @option opts [String] :endpoint 
    # @option opts [String] :method 
    # @option opts [Integer] :api_verion Api version
    # @option opts [Integer] :status_code Response status code
    # @option opts [Time] :date_created_from UTC ISO 8601 (2024-11-29T12:34:56Z)
    # @option opts [Time] :date_created_to UTC ISO 8601 (2024-11-29T12:34:56Z)
    # @option opts [Integer] :page Page number. Defaults to 1. (default to 1)
    # @option opts [Integer] :page_size Items per page. Defaults to 50. Cannot be greater than 200. (default to 100)
    # @option opts [String] :sort Sort by field. Prefix with &#39;-&#39; for descending order.
    # @option opts [String] :query 
    # @option opts [Boolean] :success 
    # @option opts [Time] :date_time_from Date and time of the event
    # @option opts [Time] :date_time_to Date and time of the event
    # @return [Array<(Array<Event>, Integer, Hash)>] Array<Event> data, response status code and response headers
    def log_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LogApi.log_get ...'
      end
      # resource path
      local_var_path = '/log'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'company_id'] = opts[:'company_id'] if !opts[:'company_id'].nil?
      query_params[:'endpoint'] = opts[:'endpoint'] if !opts[:'endpoint'].nil?
      query_params[:'method'] = opts[:'method'] if !opts[:'method'].nil?
      query_params[:'api_verion'] = opts[:'api_verion'] if !opts[:'api_verion'].nil?
      query_params[:'status_code'] = opts[:'status_code'] if !opts[:'status_code'].nil?
      query_params[:'date_created_from'] = opts[:'date_created_from'] if !opts[:'date_created_from'].nil?
      query_params[:'date_created_to'] = opts[:'date_created_to'] if !opts[:'date_created_to'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?
      query_params[:'query'] = opts[:'query'] if !opts[:'query'].nil?
      query_params[:'success'] = opts[:'success'] if !opts[:'success'].nil?
      query_params[:'date_time_from'] = opts[:'date_time_from'] if !opts[:'date_time_from'].nil?
      query_params[:'date_time_to'] = opts[:'date_time_to'] if !opts[:'date_time_to'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<Event>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Basic']

      new_options = opts.merge(
        :operation => :"LogApi.log_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LogApi#log_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get an event by id
    # Every API operation is logged and can be retrieved here. Log records are preserved for 15 days.
    # @param id [Integer] Item id
    # @param [Hash] opts the optional parameters
    # @return [Event]
    def log_id_get(id, opts = {})
      data, _status_code, _headers = log_id_get_with_http_info(id, opts)
      data
    end

    # Get an event by id
    # Every API operation is logged and can be retrieved here. Log records are preserved for 15 days.
    # @param id [Integer] Item id
    # @param [Hash] opts the optional parameters
    # @return [Array<(Event, Integer, Hash)>] Event data, response status code and response headers
    def log_id_get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LogApi.log_id_get ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling LogApi.log_id_get"
      end
      # resource path
      local_var_path = '/log/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Event'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Basic']

      new_options = opts.merge(
        :operation => :"LogApi.log_id_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LogApi#log_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
