=begin
#Invoicetronic API

#The [Invoicetronic API][2] is a RESTful service that allows you to send and receive invoices through the Italian [Servizio di Interscambio (SDI)][1], or Interchange Service. The API is designed to be simple and easy to use, abstracting away SDI complexity while providing complete control over the invoice send/receive process. It provides advanced features as encryption at rest, multi-language pre-flight invoice validation, multiple upload formats, webhooks, event logging, client SDKs, and CLI tools.  For more information, see  [Invoicetronic website][2]  [1]: https://www.fatturapa.gov.it/it/sistemainterscambio/cose-il-sdi/ [2]: https://invoicetronic.com/

The version of the OpenAPI document: 1
Contact: info@invoicetronic.com
Generated by: https://openapi-generator.tech
Generator version: 7.14.0

=end

require 'cgi'

module Invoicetronic_Sdk
  class SendApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Add an invoice by file
    # Send invoices are the invoices that are sent to the SDI. They are preserved for two years in the live environment and 15 days in the Sandbox.
    # @param file [File] 
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :validate Validate the document first, and reject it on failure. (default to false)
    # @option opts [String] :signature Whether to digitally sign the document. (default to 'Auto')
    # @return [ModelSend]
    def send_file_post(file, opts = {})
      data, _status_code, _headers = send_file_post_with_http_info(file, opts)
      data
    end

    # Add an invoice by file
    # Send invoices are the invoices that are sent to the SDI. They are preserved for two years in the live environment and 15 days in the Sandbox.
    # @param file [File] 
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :validate Validate the document first, and reject it on failure. (default to false)
    # @option opts [String] :signature Whether to digitally sign the document. (default to 'Auto')
    # @return [Array<(ModelSend, Integer, Hash)>] ModelSend data, response status code and response headers
    def send_file_post_with_http_info(file, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SendApi.send_file_post ...'
      end
      # verify the required parameter 'file' is set
      if @api_client.config.client_side_validation && file.nil?
        fail ArgumentError, "Missing the required parameter 'file' when calling SendApi.send_file_post"
      end
      allowable_values = ["None", "Apply", "Force", "Auto"]
      if @api_client.config.client_side_validation && opts[:'signature'] && !allowable_values.include?(opts[:'signature'])
        fail ArgumentError, "invalid value for \"signature\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/send/file'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'validate'] = opts[:'validate'] if !opts[:'validate'].nil?
      query_params[:'signature'] = opts[:'signature'] if !opts[:'signature'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['multipart/form-data'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['file'] = file

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ModelSend'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Basic']

      new_options = opts.merge(
        :operation => :"SendApi.send_file_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SendApi#send_file_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List invoices
    # test **markdown**.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :company_id Company id
    # @option opts [String] :identifier SDI identifier.
    # @option opts [String] :committente Vat number or fiscal code.
    # @option opts [String] :prestatore Vat number or fiscal code.
    # @option opts [String] :file_name File name.
    # @option opts [Time] :last_update_from UTC ISO 8601 (2024-11-29T12:34:56Z)
    # @option opts [Time] :last_update_to UTC ISO 8601 (2024-11-29T12:34:56Z)
    # @option opts [Time] :date_sent_from UTC ISO 8601 (2024-11-29T12:34:56Z)
    # @option opts [Time] :date_sent_to UTC ISO 8601 (2024-11-29T12:34:56Z)
    # @option opts [Time] :document_date_from UTC ISO 8601 (2024-11-29T12:34:56Z)
    # @option opts [Time] :document_date_to UTC ISO 8601 (2024-11-29T12:34:56Z)
    # @option opts [String] :document_number Document number.
    # @option opts [Boolean] :include_payload Include payload in the response. Defaults to false.
    # @option opts [Integer] :page Page number. (default to 1)
    # @option opts [Integer] :page_size Items per page. Cannot be greater than 200. (default to 100)
    # @option opts [String] :sort Sort by field. Prefix with &#39;-&#39; for descending order.
    # @return [Array<ModelSend>]
    def send_get(opts = {})
      data, _status_code, _headers = send_get_with_http_info(opts)
      data
    end

    # List invoices
    # test **markdown**.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :company_id Company id
    # @option opts [String] :identifier SDI identifier.
    # @option opts [String] :committente Vat number or fiscal code.
    # @option opts [String] :prestatore Vat number or fiscal code.
    # @option opts [String] :file_name File name.
    # @option opts [Time] :last_update_from UTC ISO 8601 (2024-11-29T12:34:56Z)
    # @option opts [Time] :last_update_to UTC ISO 8601 (2024-11-29T12:34:56Z)
    # @option opts [Time] :date_sent_from UTC ISO 8601 (2024-11-29T12:34:56Z)
    # @option opts [Time] :date_sent_to UTC ISO 8601 (2024-11-29T12:34:56Z)
    # @option opts [Time] :document_date_from UTC ISO 8601 (2024-11-29T12:34:56Z)
    # @option opts [Time] :document_date_to UTC ISO 8601 (2024-11-29T12:34:56Z)
    # @option opts [String] :document_number Document number.
    # @option opts [Boolean] :include_payload Include payload in the response. Defaults to false.
    # @option opts [Integer] :page Page number. (default to 1)
    # @option opts [Integer] :page_size Items per page. Cannot be greater than 200. (default to 100)
    # @option opts [String] :sort Sort by field. Prefix with &#39;-&#39; for descending order.
    # @return [Array<(Array<ModelSend>, Integer, Hash)>] Array<ModelSend> data, response status code and response headers
    def send_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SendApi.send_get ...'
      end
      # resource path
      local_var_path = '/send'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'company_id'] = opts[:'company_id'] if !opts[:'company_id'].nil?
      query_params[:'identifier'] = opts[:'identifier'] if !opts[:'identifier'].nil?
      query_params[:'committente'] = opts[:'committente'] if !opts[:'committente'].nil?
      query_params[:'prestatore'] = opts[:'prestatore'] if !opts[:'prestatore'].nil?
      query_params[:'file_name'] = opts[:'file_name'] if !opts[:'file_name'].nil?
      query_params[:'last_update_from'] = opts[:'last_update_from'] if !opts[:'last_update_from'].nil?
      query_params[:'last_update_to'] = opts[:'last_update_to'] if !opts[:'last_update_to'].nil?
      query_params[:'date_sent_from'] = opts[:'date_sent_from'] if !opts[:'date_sent_from'].nil?
      query_params[:'date_sent_to'] = opts[:'date_sent_to'] if !opts[:'date_sent_to'].nil?
      query_params[:'document_date_from'] = opts[:'document_date_from'] if !opts[:'document_date_from'].nil?
      query_params[:'document_date_to'] = opts[:'document_date_to'] if !opts[:'document_date_to'].nil?
      query_params[:'document_number'] = opts[:'document_number'] if !opts[:'document_number'].nil?
      query_params[:'include_payload'] = opts[:'include_payload'] if !opts[:'include_payload'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<ModelSend>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Basic']

      new_options = opts.merge(
        :operation => :"SendApi.send_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SendApi#send_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a invoice by id
    # Send invoices are the invoices that are sent to the SDI. They are preserved for two years in the live environment and 15 days in the Sandbox.
    # @param id [Integer] Item id
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :include_payload Include payload in the response. Defaults to false. (default to false)
    # @return [ModelSend]
    def send_id_get(id, opts = {})
      data, _status_code, _headers = send_id_get_with_http_info(id, opts)
      data
    end

    # Get a invoice by id
    # Send invoices are the invoices that are sent to the SDI. They are preserved for two years in the live environment and 15 days in the Sandbox.
    # @param id [Integer] Item id
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :include_payload Include payload in the response. Defaults to false. (default to false)
    # @return [Array<(ModelSend, Integer, Hash)>] ModelSend data, response status code and response headers
    def send_id_get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SendApi.send_id_get ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling SendApi.send_id_get"
      end
      # resource path
      local_var_path = '/send/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'include_payload'] = opts[:'include_payload'] if !opts[:'include_payload'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ModelSend'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Basic']

      new_options = opts.merge(
        :operation => :"SendApi.send_id_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SendApi#send_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a invoice by identifier
    # Send invoices are the invoices that are sent to the SDI. They are preserved for two years in the live environment and 15 days in the Sandbox.
    # @param identifier [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :include_payload Include payload in the response. Defaults to false. (default to false)
    # @return [ModelSend]
    def send_identifier_get(identifier, opts = {})
      data, _status_code, _headers = send_identifier_get_with_http_info(identifier, opts)
      data
    end

    # Get a invoice by identifier
    # Send invoices are the invoices that are sent to the SDI. They are preserved for two years in the live environment and 15 days in the Sandbox.
    # @param identifier [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :include_payload Include payload in the response. Defaults to false. (default to false)
    # @return [Array<(ModelSend, Integer, Hash)>] ModelSend data, response status code and response headers
    def send_identifier_get_with_http_info(identifier, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SendApi.send_identifier_get ...'
      end
      # verify the required parameter 'identifier' is set
      if @api_client.config.client_side_validation && identifier.nil?
        fail ArgumentError, "Missing the required parameter 'identifier' when calling SendApi.send_identifier_get"
      end
      # resource path
      local_var_path = '/send/{identifier}'.sub('{' + 'identifier' + '}', CGI.escape(identifier.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'include_payload'] = opts[:'include_payload'] if !opts[:'include_payload'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ModelSend'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Basic']

      new_options = opts.merge(
        :operation => :"SendApi.send_identifier_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SendApi#send_identifier_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Add an invoice by json
    # Send invoices are the invoices that are sent to the SDI. They are preserved for two years in the live environment and 15 days in the Sandbox.
    # @param fattura_ordinaria [FatturaOrdinaria] 
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :validate Validate the document first, and reject it on failure. (default to false)
    # @option opts [String] :signature Whether to digitally sign the document. (default to 'Auto')
    # @return [ModelSend]
    def send_json_post(fattura_ordinaria, opts = {})
      data, _status_code, _headers = send_json_post_with_http_info(fattura_ordinaria, opts)
      data
    end

    # Add an invoice by json
    # Send invoices are the invoices that are sent to the SDI. They are preserved for two years in the live environment and 15 days in the Sandbox.
    # @param fattura_ordinaria [FatturaOrdinaria] 
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :validate Validate the document first, and reject it on failure. (default to false)
    # @option opts [String] :signature Whether to digitally sign the document. (default to 'Auto')
    # @return [Array<(ModelSend, Integer, Hash)>] ModelSend data, response status code and response headers
    def send_json_post_with_http_info(fattura_ordinaria, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SendApi.send_json_post ...'
      end
      # verify the required parameter 'fattura_ordinaria' is set
      if @api_client.config.client_side_validation && fattura_ordinaria.nil?
        fail ArgumentError, "Missing the required parameter 'fattura_ordinaria' when calling SendApi.send_json_post"
      end
      allowable_values = ["None", "Apply", "Force", "Auto"]
      if @api_client.config.client_side_validation && opts[:'signature'] && !allowable_values.include?(opts[:'signature'])
        fail ArgumentError, "invalid value for \"signature\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/send/json'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'validate'] = opts[:'validate'] if !opts[:'validate'].nil?
      query_params[:'signature'] = opts[:'signature'] if !opts[:'signature'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(fattura_ordinaria)

      # return_type
      return_type = opts[:debug_return_type] || 'ModelSend'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Basic']

      new_options = opts.merge(
        :operation => :"SendApi.send_json_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SendApi#send_json_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Add an invoice
    # Send invoices are the invoices that are sent to the SDI. They are preserved for two years in the live environment and 15 days in the Sandbox.
    # @param model_send [ModelSend] 
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :validate Validate the document first, and reject it on failure. (default to false)
    # @option opts [String] :signature Whether to digitally sign the document. (default to 'Auto')
    # @return [ModelSend]
    def send_post(model_send, opts = {})
      data, _status_code, _headers = send_post_with_http_info(model_send, opts)
      data
    end

    # Add an invoice
    # Send invoices are the invoices that are sent to the SDI. They are preserved for two years in the live environment and 15 days in the Sandbox.
    # @param model_send [ModelSend] 
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :validate Validate the document first, and reject it on failure. (default to false)
    # @option opts [String] :signature Whether to digitally sign the document. (default to 'Auto')
    # @return [Array<(ModelSend, Integer, Hash)>] ModelSend data, response status code and response headers
    def send_post_with_http_info(model_send, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SendApi.send_post ...'
      end
      # verify the required parameter 'model_send' is set
      if @api_client.config.client_side_validation && model_send.nil?
        fail ArgumentError, "Missing the required parameter 'model_send' when calling SendApi.send_post"
      end
      allowable_values = ["None", "Apply", "Force", "Auto"]
      if @api_client.config.client_side_validation && opts[:'signature'] && !allowable_values.include?(opts[:'signature'])
        fail ArgumentError, "invalid value for \"signature\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/send'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'validate'] = opts[:'validate'] if !opts[:'validate'].nil?
      query_params[:'signature'] = opts[:'signature'] if !opts[:'signature'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(model_send)

      # return_type
      return_type = opts[:debug_return_type] || 'ModelSend'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Basic']

      new_options = opts.merge(
        :operation => :"SendApi.send_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SendApi#send_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Validate an invoice file
    # Send invoices are the invoices that are sent to the SDI. They are preserved for two years in the live environment and 15 days in the Sandbox.
    # @param file [File] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def send_validate_file_post(file, opts = {})
      send_validate_file_post_with_http_info(file, opts)
      nil
    end

    # Validate an invoice file
    # Send invoices are the invoices that are sent to the SDI. They are preserved for two years in the live environment and 15 days in the Sandbox.
    # @param file [File] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def send_validate_file_post_with_http_info(file, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SendApi.send_validate_file_post ...'
      end
      # verify the required parameter 'file' is set
      if @api_client.config.client_side_validation && file.nil?
        fail ArgumentError, "Missing the required parameter 'file' when calling SendApi.send_validate_file_post"
      end
      # resource path
      local_var_path = '/send/validate/file'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['multipart/form-data'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['file'] = file

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Basic']

      new_options = opts.merge(
        :operation => :"SendApi.send_validate_file_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SendApi#send_validate_file_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Validate an invoice by json
    # Send invoices are the invoices that are sent to the SDI. They are preserved for two years in the live environment and 15 days in the Sandbox.
    # @param fattura_ordinaria [FatturaOrdinaria] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def send_validate_json_post(fattura_ordinaria, opts = {})
      send_validate_json_post_with_http_info(fattura_ordinaria, opts)
      nil
    end

    # Validate an invoice by json
    # Send invoices are the invoices that are sent to the SDI. They are preserved for two years in the live environment and 15 days in the Sandbox.
    # @param fattura_ordinaria [FatturaOrdinaria] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def send_validate_json_post_with_http_info(fattura_ordinaria, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SendApi.send_validate_json_post ...'
      end
      # verify the required parameter 'fattura_ordinaria' is set
      if @api_client.config.client_side_validation && fattura_ordinaria.nil?
        fail ArgumentError, "Missing the required parameter 'fattura_ordinaria' when calling SendApi.send_validate_json_post"
      end
      # resource path
      local_var_path = '/send/validate/json'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(fattura_ordinaria)

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Basic']

      new_options = opts.merge(
        :operation => :"SendApi.send_validate_json_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SendApi#send_validate_json_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Validate an invoice
    # Send invoices are the invoices that are sent to the SDI. They are preserved for two years in the live environment and 15 days in the Sandbox.
    # @param model_send [ModelSend] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def send_validate_post(model_send, opts = {})
      send_validate_post_with_http_info(model_send, opts)
      nil
    end

    # Validate an invoice
    # Send invoices are the invoices that are sent to the SDI. They are preserved for two years in the live environment and 15 days in the Sandbox.
    # @param model_send [ModelSend] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def send_validate_post_with_http_info(model_send, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SendApi.send_validate_post ...'
      end
      # verify the required parameter 'model_send' is set
      if @api_client.config.client_side_validation && model_send.nil?
        fail ArgumentError, "Missing the required parameter 'model_send' when calling SendApi.send_validate_post"
      end
      # resource path
      local_var_path = '/send/validate'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(model_send)

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Basic']

      new_options = opts.merge(
        :operation => :"SendApi.send_validate_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SendApi#send_validate_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Validate an invoice by xml
    # Send invoices are the invoices that are sent to the SDI. They are preserved for two years in the live environment and 15 days in the Sandbox.
    # @param fattura_ordinaria [FatturaOrdinaria] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def send_validate_xml_post(fattura_ordinaria, opts = {})
      send_validate_xml_post_with_http_info(fattura_ordinaria, opts)
      nil
    end

    # Validate an invoice by xml
    # Send invoices are the invoices that are sent to the SDI. They are preserved for two years in the live environment and 15 days in the Sandbox.
    # @param fattura_ordinaria [FatturaOrdinaria] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def send_validate_xml_post_with_http_info(fattura_ordinaria, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SendApi.send_validate_xml_post ...'
      end
      # verify the required parameter 'fattura_ordinaria' is set
      if @api_client.config.client_side_validation && fattura_ordinaria.nil?
        fail ArgumentError, "Missing the required parameter 'fattura_ordinaria' when calling SendApi.send_validate_xml_post"
      end
      # resource path
      local_var_path = '/send/validate/xml'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/xml'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(fattura_ordinaria)

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Basic']

      new_options = opts.merge(
        :operation => :"SendApi.send_validate_xml_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SendApi#send_validate_xml_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Add an invoice by xml
    # Send invoices are the invoices that are sent to the SDI. They are preserved for two years in the live environment and 15 days in the Sandbox.
    # @param fattura_ordinaria [FatturaOrdinaria] 
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :validate Validate the document first, and reject it on failure. (default to false)
    # @option opts [String] :signature Whether to digitally sign the document. (default to 'Auto')
    # @return [ModelSend]
    def send_xml_post(fattura_ordinaria, opts = {})
      data, _status_code, _headers = send_xml_post_with_http_info(fattura_ordinaria, opts)
      data
    end

    # Add an invoice by xml
    # Send invoices are the invoices that are sent to the SDI. They are preserved for two years in the live environment and 15 days in the Sandbox.
    # @param fattura_ordinaria [FatturaOrdinaria] 
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :validate Validate the document first, and reject it on failure. (default to false)
    # @option opts [String] :signature Whether to digitally sign the document. (default to 'Auto')
    # @return [Array<(ModelSend, Integer, Hash)>] ModelSend data, response status code and response headers
    def send_xml_post_with_http_info(fattura_ordinaria, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SendApi.send_xml_post ...'
      end
      # verify the required parameter 'fattura_ordinaria' is set
      if @api_client.config.client_side_validation && fattura_ordinaria.nil?
        fail ArgumentError, "Missing the required parameter 'fattura_ordinaria' when calling SendApi.send_xml_post"
      end
      allowable_values = ["None", "Apply", "Force", "Auto"]
      if @api_client.config.client_side_validation && opts[:'signature'] && !allowable_values.include?(opts[:'signature'])
        fail ArgumentError, "invalid value for \"signature\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/send/xml'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'validate'] = opts[:'validate'] if !opts[:'validate'].nil?
      query_params[:'signature'] = opts[:'signature'] if !opts[:'signature'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/xml'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(fattura_ordinaria)

      # return_type
      return_type = opts[:debug_return_type] || 'ModelSend'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Basic']

      new_options = opts.merge(
        :operation => :"SendApi.send_xml_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SendApi#send_xml_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
